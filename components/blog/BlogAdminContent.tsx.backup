"use client";

import { useState, useEffect, useMemo } from 'react';
import Image from 'next/image';
import BlockEditor from './BlockEditor';
import {
  fetchCategories,
  fetchAllPostsAdmin,
  createPost,
  updatePost,
  deletePost,
  uploadImage,
  generateSlug
} from '@/lib/blogService';
import type { BlogPost, BlogCategory, ContentBlock, BlogPostInsert } from '@/lib/supabaseClient';

export default function BlogAdminContent() {
  const [categories, setCategories] = useState<BlogCategory[]>([]);
  const [posts, setPosts] = useState<BlogPost[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [editingPost, setEditingPost] = useState<BlogPost | null>(null);
  const [showForm, setShowForm] = useState(false);

  // Form state
  const [formData, setFormData] = useState<{
    title: string;
    slug: string;
    description: string;
    content: ContentBlock[];
    cover_image: string;
    category_id: string;
    tags: string;
    is_published: boolean;
  }>({
    title: '',
    slug: '',
    description: '',
    content: [],
    cover_image: '',
    category_id: '',
    tags: '',
    is_published: false,
  });

  // Load categories and posts
  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    const [cats, allPosts] = await Promise.all([
      fetchCategories(),
      fetchAllPostsAdmin(),
    ]);
    setCategories(cats);
    setPosts(allPosts);
    setIsLoading(false);
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    const postData: BlogPostInsert = {
      title: formData.title,
      slug: formData.slug || generateSlug(formData.title),
      description: formData.description,
      content: formData.content,
      cover_image: formData.cover_image || null,
      category_id: formData.category_id || null,
      tags: formData.tags.split(',').map(t => t.trim()).filter(Boolean),
      is_published: formData.is_published,
      published_at: formData.is_published ? new Date().toISOString() : null,
      author: 'Aariz Sheikh',
      metadata: null,
    };

    let success = false;
    if (editingPost) {
      const result = await updatePost(editingPost.id, postData);
      success = result !== null;
    } else {
      const result = await createPost(postData);
      success = result !== null;
    }

    if (success) {
      alert(editingPost ? 'Post updated!' : 'Post created!');
      resetForm();
      loadData();
    } else {
      alert('Error saving post');
    }

    setIsLoading(false);
  };

  // Reset form
  const resetForm = () => {
    setFormData({
      title: '',
      slug: '',
      description: '',
      content: [],
      cover_image: '',
      category_id: '',
      tags: '',
      is_published: false,
    });
    setEditingPost(null);
    setShowForm(false);
  };

  // Edit post
  const handleEdit = (post: BlogPost) => {
    setFormData({
      title: post.title,
      slug: post.slug,
      description: post.description || '',
      content: post.content,
      cover_image: post.cover_image || '',
      category_id: post.category_id || '',
      tags: post.tags.join(', '),
      is_published: post.is_published,
    });
    setEditingPost(post);
    setShowForm(true);
  };

  // Delete post
  const handleDelete = async (id: string) => {
    if (!confirm('Are you sure you want to delete this post?')) return;

    setIsLoading(true);
    const success = await deletePost(id);
    if (success) {
      alert('Post deleted!');
      loadData();
    } else {
      alert('Error deleting post');
    }
    setIsLoading(false);
  };

  // Handle image upload
  const handleImageUpload = async (file: File): Promise<string | null> => {
    return await uploadImage(file);
  };

  // Handle cover image upload
  const handleCoverImageUpload = async () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const url = await uploadImage(file);
        if (url) {
          setFormData(prev => ({ ...prev, cover_image: url }));
        }
      }
    };
    input.click();
  };

  // Auto-generate slug from title
  useEffect(() => {
    if (formData.title && !editingPost) {
      setFormData(prev => ({ ...prev, slug: generateSlug(prev.title) }));
    }
  }, [formData.title, editingPost]);

  // Calculate reading time from content blocks
  const readingTime = useMemo(() => {
    const wordsPerMinute = 200;
    const textBlocks = formData.content.filter(block => block.type === 'paragraph');
    const totalWords = textBlocks.reduce((count, block) => {
      if ('text' in block) {
        return count + (block.text?.split(/\s+/).length || 0);
      }
      return count;
    }, 0);
    return Math.ceil(totalWords / wordsPerMinute) || 1;
  }, [formData.content]);

  return (
    <div className="flex-1 overflow-hidden flex flex-col">
      {/* Header with Actions */}
      <div className="flex items-center justify-between p-4 border-b border-gray-700 bg-[#0D1117]">
        <h2 className="font-mono text-lg text-[#00ff88] flex items-center gap-2">
          <span className="text-[#ff8c00]">{'>'}</span>
          {showForm ? (editingPost ? 'Edit Post' : 'New Post') : 'Blog Posts'}
        </h2>
        <div className="flex gap-2">
          {showForm ? (
            <button
              onClick={resetForm}
              className="px-4 py-2 bg-gray-700 text-white font-mono text-sm rounded hover:bg-gray-600 transition-colors active:scale-95"
            >
              ← Back to List
            </button>
          ) : (
            <button
              onClick={() => {
                resetForm();
                setShowForm(true);
              }}
              className="px-4 py-2 bg-[#00ff88] text-[#0D1117] font-mono text-sm rounded hover:bg-[#00ff88]/90 transition-colors active:scale-95"
            >
              + New Post
            </button>
          )}
        </div>
      </div>

      {showForm ? (
        /* Split View - Editor + Preview */
        <div className="flex-1 overflow-hidden flex flex-col lg:flex-row">
          {/* Left Panel - Editor */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 border-r border-gray-700 bg-[#0D1117] custom-scrollbar">
            <form onSubmit={handleSubmit} className="max-w-3xl space-y-4">
              {/* Title */}
              <div>
                <label className="block font-mono text-sm text-[#00ff88] mb-2">
                  <span className="text-[#ff8c00]">$</span> Title *
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                  required
                  className="w-full bg-[#161b22] border border-gray-700 rounded px-4 py-3 text-white font-mono focus:outline-none focus:border-[#00ff88] transition-colors"
                  placeholder="Enter post title..."
                />
              </div>

              {/* Slug */}
              <div>
                <label className="block font-mono text-sm text-gray-400 mb-2">
                  <span className="text-[#ff8c00]">$</span> Slug (auto-generated)
                </label>
                <input
                  type="text"
                  value={formData.slug}
                  onChange={(e) => setFormData(prev => ({ ...prev, slug: e.target.value }))}
                  className="w-full bg-[#161b22] border border-gray-700 rounded px-4 py-3 text-gray-400 font-mono text-sm focus:outline-none focus:border-[#00ff88] transition-colors"
                  placeholder="auto-generated-slug"
                />
              </div>

              {/* Category & Published Status */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block font-mono text-sm text-[#00ff88] mb-2">
                    <span className="text-[#ff8c00]">$</span> Category
                  </label>
                  <select
                    value={formData.category_id}
                    onChange={(e) => setFormData(prev => ({ ...prev, category_id: e.target.value }))}
                    className="w-full bg-[#161b22] border border-gray-700 rounded px-4 py-3 text-white font-mono focus:outline-none focus:border-[#00ff88] transition-colors"
                  >
                    <option value="">Select category</option>
                    {categories.map(cat => (
                      <option key={cat.id} value={cat.id}>
                        {cat.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block font-mono text-sm text-[#00ff88] mb-2">
                    <span className="text-[#ff8c00]">$</span> Status
                  </label>
                  <div className="flex items-center h-[50px] px-4 bg-[#161b22] border border-gray-700 rounded">
                    <input
                      type="checkbox"
                      id="published"
                      checked={formData.is_published}
                      onChange={(e) => setFormData(prev => ({ ...prev, is_published: e.target.checked }))}
                      className="w-5 h-5 bg-[#161b22] border-gray-700 rounded text-[#00ff88] focus:ring-[#00ff88] cursor-pointer"
                    />
                    <label htmlFor="published" className="ml-3 text-sm font-mono text-gray-300 cursor-pointer">
                      {formData.is_published ? '✓ Published' : '• Draft'}
                    </label>
                  </div>
                </div>
              </div>

              {/* Description */}
              <div>
                <label className="block font-mono text-sm text-[#00ff88] mb-2">
                  <span className="text-[#ff8c00]">$</span> Description
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                  className="w-full bg-[#161b22] border border-gray-700 rounded px-4 py-3 text-white font-mono focus:outline-none focus:border-[#00ff88] transition-colors resize-y"
                  placeholder="Brief description for SEO and previews..."
                />
              </div>

              {/* Cover Image */}
              <div>
                <label className="block font-mono text-sm text-[#00ff88] mb-2">
                  <span className="text-[#ff8c00]">$</span> Cover Image
                </label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={formData.cover_image}
                    onChange={(e) => setFormData(prev => ({ ...prev, cover_image: e.target.value }))}
                    className="flex-1 bg-[#161b22] border border-gray-700 rounded px-4 py-3 text-white font-mono focus:outline-none focus:border-[#00ff88] transition-colors"
                    placeholder="Image URL or click upload..."
                  />
                  <button
                    type="button"
                    onClick={handleCoverImageUpload}
                    className="px-6 py-3 bg-[#00d4ff] text-[#0D1117] font-mono rounded hover:bg-[#00d4ff]/80 transition-colors active:scale-95 whitespace-nowrap"
                  >
                    📁 Upload
                  </button>
                </div>
                {formData.cover_image && (
                  <div className="mt-3 relative w-full h-48 rounded-lg overflow-hidden border border-gray-700">
                    <Image
                      src={formData.cover_image}
                      alt="Cover preview"
                      fill
                      className="object-cover"
                    />
                  </div>
                )}
              </div>

              {/* Tags */}
              <div>
                <label className="block font-mono text-sm text-[#00ff88] mb-2">
                  <span className="text-[#ff8c00]">$</span> Tags
                </label>
                <input
                  type="text"
                  value={formData.tags}
                  onChange={(e) => setFormData(prev => ({ ...prev, tags: e.target.value }))}
                  className="w-full bg-[#161b22] border border-gray-700 rounded px-4 py-3 text-white font-mono focus:outline-none focus:border-[#00ff88] transition-colors"
                  placeholder="React, TypeScript, Tutorial"
                />
                <div className="mt-2 text-xs font-mono text-gray-500">
                  💡 Separate with commas
                </div>
              </div>

              {/* Content Editor */}
              <div>
                <label className="block font-mono text-sm text-[#00ff88] mb-2">
                  <span className="text-[#ff8c00]">$</span> Content *
                </label>
                <div className="border border-gray-700 rounded-lg overflow-hidden">
                  <BlockEditor
                    content={formData.content}
                    onChange={(blocks) => setFormData(prev => ({ ...prev, content: blocks }))}
                    onImageUpload={handleImageUpload}
                  />
                </div>
              </div>

              {/* Submit Buttons */}
              <div className="flex gap-3 pt-4 border-t border-gray-700">
                <button
                  type="submit"
                  disabled={isLoading}
                  className="flex-1 px-6 py-3 bg-[#00ff88] text-[#0D1117] font-mono rounded hover:bg-[#00ff88]/90 transition-colors active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed font-bold"
                >
                  {isLoading ? '⏳ Saving...' : editingPost ? '✓ Update Post' : '✓ Create Post'}
                </button>
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-6 py-3 bg-gray-700 text-white font-mono rounded hover:bg-gray-600 transition-colors active:scale-95"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>

          {/* Right Panel - Live Preview */}
          <div className="flex-1 overflow-y-auto bg-[#161b22] custom-scrollbar">
            <div className="sticky top-0 z-10 bg-[#0D1117] border-b border-gray-700 px-4 py-3">
              <div className="flex items-center justify-between">
                <h3 className="font-mono text-sm text-[#00d4ff] flex items-center gap-2">
                  <span className="animate-pulse">●</span> Live Preview
                </h3>
                <div className="font-mono text-xs text-gray-500">
                  {readingTime} min read
                </div>
              </div>
            </div>

            <div className="p-6">
              {/* Preview Content */}
              <article className="max-w-3xl mx-auto">
                {/* Cover Image Preview */}
                {formData.cover_image && (
                  <div className="mb-8 rounded-lg overflow-hidden border border-gray-700">
                    <div className="relative aspect-video bg-[#0D1117]">
                      <Image
                        src={formData.cover_image}
                        alt={formData.title || 'Cover'}
                        fill
                        className="object-cover"
                      />
                    </div>
                  </div>
                )}

                {/* Title Preview */}
                <h1 className="text-4xl font-bold mb-4 text-[#00ff88] font-mono break-words">
                  {formData.title || 'Untitled Post'}
                </h1>

                {/* Meta Info */}
                <div className="flex flex-wrap items-center gap-4 mb-6 pb-6 border-b border-gray-700">
                  <div className="font-mono text-xs text-gray-400">
                    <span className="text-[#ff8c00]">category:</span>{' '}
                    <span className="text-[#00d4ff]">
                      {formData.category_id
                        ? categories.find(c => c.id === formData.category_id)?.name
                        : 'None'}
                    </span>
                  </div>
                  <div className="font-mono text-xs text-gray-400">
                    <span className="text-[#ff8c00]">status:</span>{' '}
                    <span className={formData.is_published ? 'text-green-400' : 'text-gray-500'}>
                      {formData.is_published ? 'Published' : 'Draft'}
                    </span>
                  </div>
                  <div className="font-mono text-xs text-gray-400">
                    <span className="text-[#ff8c00]">reading_time:</span>{' '}
                    <span className="text-gray-300">{readingTime} min</span>
                  </div>
                </div>

                {/* Tags Preview */}
                {formData.tags && (
                  <div className="flex flex-wrap gap-2 mb-6">
                    {formData.tags.split(',').map((tag, index) => {
                      const trimmedTag = tag.trim();
                      if (!trimmedTag) return null;
                      return (
                        <span
                          key={index}
                          className="font-mono text-xs px-3 py-1 bg-[#00ff88]/10 text-[#00ff88] border border-[#00ff88]/30 rounded-full"
                        >
                          #{trimmedTag}
                        </span>
                      );
                    })}
                  </div>
                )}

                {/* Description Preview */}
                {formData.description && (
                  <div className="mb-8 p-4 bg-[#0D1117] border-l-4 border-[#00d4ff] rounded">
                    <div className="font-mono text-xs text-[#00d4ff] mb-2">// Description</div>
                    <p className="text-gray-300 leading-relaxed">{formData.description}</p>
                  </div>
                )}

                {/* Content Preview */}
                <div className="prose prose-invert max-w-none space-y-6">
                  {formData.content.length === 0 ? (
                    <div className="text-center py-12 text-gray-500 font-mono text-sm">
                      Start writing content...
                    </div>
                  ) : (
                    formData.content.map((block, idx) => {
                      if (block.type === 'paragraph' && 'text' in block) {
                        return (
                          <p key={idx} className="text-gray-300 leading-relaxed">
                            {block.text}
                          </p>
                        );
                      }

                      if (block.type === 'heading' && 'text' in block && 'level' in block) {
                        const level = block.level || 2;
                        const sizes = {
                          1: 'text-3xl',
                          2: 'text-2xl',
                          3: 'text-xl',
                        };
                        const sizeClass = sizes[level as keyof typeof sizes] || 'text-lg';

                        if (level === 1) {
                          return (
                            <h1 key={idx} className={`font-bold text-[#00ff88] font-mono ${sizeClass}`}>
                              {block.text}
                            </h1>
                          );
                        } else if (level === 2) {
                          return (
                            <h2 key={idx} className={`font-bold text-[#00ff88] font-mono ${sizeClass}`}>
                              {block.text}
                            </h2>
                          );
                        } else {
                          return (
                            <h3 key={idx} className={`font-bold text-[#00ff88] font-mono ${sizeClass}`}>
                              {block.text}
                            </h3>
                          );
                        }
                      }

                      if (block.type === 'image' && 'src' in block && block.src) {
                        return (
                          <figure key={idx} className="my-6">
                            <div className="relative w-full aspect-video rounded-lg overflow-hidden border border-gray-700">
                              <Image
                                src={block.src}
                                alt={'alt' in block && block.alt ? block.alt : 'Content image'}
                                fill
                                className="object-cover"
                              />
                            </div>
                            {'caption' in block && block.caption && (
                              <figcaption className="mt-2 text-sm text-gray-400 font-mono text-center">
                                {block.caption}
                              </figcaption>
                            )}
                          </figure>
                        );
                      }

                      if (block.type === 'code' && 'code' in block) {
                        return (
                          <pre
                            key={idx}
                            className="p-4 bg-[#0D1117] border border-gray-700 rounded-lg overflow-x-auto text-sm font-mono"
                          >
                            <code className="text-[#00ff88]">{block.code}</code>
                          </pre>
                        );
                      }

                      if (block.type === 'list' && 'items' in block && Array.isArray(block.items)) {
                        return (
                          <ul key={idx} className="list-disc list-inside space-y-2 text-gray-300">
                            {block.items.map((item, i) => (
                              <li key={i}>{item}</li>
                            ))}
                          </ul>
                        );
                      }

                      if (block.type === 'quote' && 'text' in block) {
                        return (
                          <blockquote
                            key={idx}
                            className="border-l-4 border-[#ff8c00] pl-4 italic text-gray-400"
                          >
                            {block.text}
                          </blockquote>
                        );
                      }

                      return null;
                    })
                  )}
                </div>
              </article>
            </div>
          </div>
        </div>
      ) : (
        /* Posts List View */
        <div className="flex-1 overflow-y-auto p-4 custom-scrollbar">
          {isLoading && posts.length === 0 ? (
            <div className="text-center py-12">
              <div className="font-mono text-[#00ff88] animate-pulse">Loading posts...</div>
            </div>
          ) : (
            <div className="max-w-6xl mx-auto">
              <div className="mb-4 font-mono text-sm text-gray-400">
                {posts.length} {posts.length === 1 ? 'post' : 'posts'} total
              </div>

              <div className="grid gap-4">
                {posts.map(post => (
                  <div
                    key={post.id}
                    className="bg-[#161b22] border border-gray-700 rounded-lg p-6 hover:border-[#00ff88]/50 transition-all group"
                  >
                    <div className="flex justify-between items-start gap-4">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-3 mb-2">
                          <h4 className="font-mono text-lg font-bold text-white truncate">
                            {post.title}
                          </h4>
                          {post.is_published ? (
                            <span className="px-2 py-1 text-xs font-mono bg-green-500/20 text-green-400 border border-green-500/30 rounded">
                              ✓ Published
                            </span>
                          ) : (
                            <span className="px-2 py-1 text-xs font-mono bg-gray-700/50 text-gray-400 border border-gray-600 rounded">
                              • Draft
                            </span>
                          )}
                        </div>

                        {post.description && (
                          <p className="text-sm text-gray-400 mb-3 line-clamp-2">
                            {post.description}
                          </p>
                        )}

                        <div className="flex flex-wrap items-center gap-3 text-xs font-mono text-gray-500">
                          <span>{new Date(post.created_at).toLocaleDateString()}</span>
                          <span>•</span>
                          <span>{post.views} views</span>
                          <span>•</span>
                          <span>{post.reading_time} min read</span>
                          {post.category_id && categories.find(c => c.id === post.category_id) && (
                            <>
                              <span>•</span>
                              <span className="text-[#00d4ff]">
                                {categories.find(c => c.id === post.category_id)?.name}
                              </span>
                            </>
                          )}
                        </div>

                        {post.tags.length > 0 && (
                          <div className="flex flex-wrap gap-2 mt-3">
                            {post.tags.map((tag, i) => (
                              <span
                                key={i}
                                className="px-2 py-1 bg-[#00ff88]/10 text-[#00ff88] text-xs font-mono rounded"
                              >
                                #{tag}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>

                      <div className="flex gap-2 flex-shrink-0">
                        <button
                          onClick={() => handleEdit(post)}
                          className="px-4 py-2 bg-[#00d4ff] text-[#0D1117] font-mono text-sm rounded hover:bg-[#00d4ff]/80 transition-colors active:scale-95"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDelete(post.id)}
                          className="px-4 py-2 bg-red-500/20 text-red-400 border border-red-500/30 font-mono text-sm rounded hover:bg-red-500/30 transition-colors active:scale-95"
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                ))}

                {posts.length === 0 && (
                  <div className="text-center py-16">
                    <div className="text-6xl mb-4 opacity-20">📝</div>
                    <p className="font-mono text-gray-500 mb-4">No posts yet</p>
                    <button
                      onClick={() => {
                        resetForm();
                        setShowForm(true);
                      }}
                      className="px-6 py-3 bg-[#00ff88] text-[#0D1117] font-mono rounded hover:bg-[#00ff88]/90 transition-colors"
                    >
                      Create Your First Post
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
